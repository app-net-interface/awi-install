apiVersion: v1
kind: ConfigMap
metadata:
  name: awi-ui-config
  namespace: awi-system
data:
  # set this value to stub to use fake DB
  REACT_APP_BUILD: live
  REACT_APP_IP2LOCATION_ENDPOINT: 'https://api.ip2location.io/'
  # Change it to match the location of your awi grpc vmanage controller.
  REACT_APP_VMANAGE_ADDRESS: http://127.0.0.1:8080

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: awi-ui
  namespace: awi-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: awi-ui
  template:
    metadata:
      labels:
        app: awi-ui
    spec:
      imagePullSecrets:
      - name: ausm-private-registry
      containers:
      - name: awi-ui
        image: 229451923406.dkr.ecr.us-west-2.amazonaws.com/ausm/awi-ui:0.1
        envFrom:
        - configMapRef:
            name: awi-ui-config
        env:
        - name: REACT_APP_GOOGLE_MAPS_API_KEY
          valueFrom:
            secretKeyRef:
              name: awi-ui-keys
              key: google_maps_api_key
        - name: REACT_APP_IP2LOCATION_API_KEY
          valueFrom:
            secretKeyRef:
              name: awi-ui-keys
              key: ip2_location_api_key

---

apiVersion: v1
kind: Service
metadata:
  name: awi-ui
  namespace: awi-system
spec:
  type: ClusterIP
  selector:
    app: awi-ui
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: awi-infra-config
  namespace: awi-system
data:
  config.yaml: |
    port: 50052
    dbFileName: "infra.db"
    useLocalDB: true
    syncWaitTime: "60s"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: awi-infra-guard
  namespace: awi-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: awi-infra-guard
  template:
    metadata:
      labels:
        app: awi-infra-guard
    spec:
      imagePullSecrets:
      - name: ausm-private-registry
      containers:
      - name: awi-infra-guard
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /app/gcp-key/gcp-key.json
        image: 229451923406.dkr.ecr.us-west-2.amazonaws.com/ausm/awi-infra-guard:0.1
        volumeMounts:
        - name: config-volume
          mountPath: "/root/config/"
        - name: aws-cred-volume
          mountPath: "/root/.aws/"
        - name: gcp-cred-volume
          mountPath: "/app/gcp-key/"
        - name: kube-config-volume
          mountPath: "/root/.kube/"
      volumes:
      - name: config-volume
        configMap:
          name: awi-infra-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: aws-cred-volume
        secret:
          secretName: aws-credentials
      - name: gcp-cred-volume
        secret:
          secretName: gcp-credentials
      - name: kube-config-volume
        secret:
          secretName: kube-config

---

apiVersion: v1
kind: Service
metadata:
  name: awi-infra-guard
  namespace: awi-system
spec:
  type: ClusterIP
  selector:
    app: awi-infra-guard
  ports:
    - protocol: TCP
      port: 50052
      targetPort: 50052

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: awi-grpc-catalyst-sdwan-config
  namespace: awi-system
data:
  config.yaml: |
    controllers:
      sdwan:
        controller_connection_retries: 200
        name: cisco-sdwan
        retries_interval: 5s
        secure_connection: false
        url: https://sdwan-vmanage-00.mycelium.cn-automation.net:8443
        vendor: cisco
    globals:
      hostname: 0.0.0.0
      port: 50051
      controller_connection_retries: 100
      db_name: awi.db
      #log_file: awi.log
      log_level: DEBUG
      retries_interval: 2s
      secure_connection: false
      #kube_config_file: kubeconfig
      network_domain_connector: awi # possible options: vManage (default), awi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: awi-grpc-catalyst-sdwan
  namespace: awi-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: awi-grpc-catalyst-sdwan
  template:
    metadata:
      labels:
        app: awi-grpc-catalyst-sdwan
    spec:
      imagePullSecrets:
      - name: ausm-private-registry
      containers:
      - name: awi-grpc-catalyst-sdwan
        image: 229451923406.dkr.ecr.us-west-2.amazonaws.com/ausm/awi-grpc-catalyst-sdwan:0.1
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /app/gcp-key/gcp-key.json 
        - name: VMANAGE_USERNAME
          valueFrom:
            secretKeyRef:
              name: vmanage-credentials
              key: username
        - name: VMANAGE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vmanage-credentials
              key: password
        volumeMounts:
        - name: config-volume
          mountPath: "/root/config/"
        - name: aws-cred-volume
          mountPath: "/root/.aws/"
        - name: gcp-cred-volume
          mountPath: "/app/gcp-key/"
        - name: kube-config-volume
          mountPath: "/root/.kube/"
      volumes:
      - name: config-volume
        configMap:
          name: awi-grpc-catalyst-sdwan-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: aws-cred-volume
        secret:
          secretName: aws-credentials
      - name: gcp-cred-volume
        secret:
          secretName: gcp-credentials
      - name: kube-config-volume
        secret:
          secretName: kube-config

---

apiVersion: v1
kind: Service
metadata:
  name: awi-grpc-catalyst-sdwan
  namespace: awi-system
spec:
  type: ClusterIP
  selector:
    app: awi-grpc-catalyst-sdwan
  ports:
    - protocol: TCP
      port: 50051
      targetPort: 50051

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-proxy-config
  namespace: awi-system
data:
  envoy.yaml: |
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: { address: 0.0.0.0, port_value: 9901 }

    static_resources:
      listeners:
        - name: front_end_listener
          address:
            socket_address: { address: 0.0.0.0, port_value: 80 }
          filter_chains:
          - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: front_end
                    domains: ["*"]
                    routes:
                    - match: { prefix: "/" }
                      route: { cluster: front_end_service }
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        - name: back_end_listener
          address:
            socket_address: { address: "::", port_value: 8080, ipv4_compat: true }
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: auto
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: ["*"]
                          routes:
                            - match: { prefix: "/AppConnectionController/" }
                              route:
                                cluster: awi_service
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match: { prefix: "/NetworkSLAService/" }
                              route:
                                cluster: awi_service
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match: { prefix: "/ConnectionController/" }
                              route:
                                cluster: awi_service
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match: { prefix: "/Cloud/" }
                              route:
                                cluster: awi_service
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match: { prefix: "/SecurityPolicyService/" }
                              route:
                                cluster: awi_service
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match: { prefix: "/infra.CloudProviderService/" }
                              route:
                                cluster: infra_service
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match: { prefix: "/infra.AccessControlService/" }
                              route:
                                cluster: infra_service
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match: { prefix: "/infra.KubernetesService/" }
                              route:
                                cluster: infra_service
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                          cors:
                            allow_origin_string_match:
                              - prefix: "*"
                            allow_methods: GET, PUT, DELETE, POST, OPTIONS
                            allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                            max_age: "1728000"
                            expose_headers: custom-header-1,grpc-status,grpc-message
                    http_filters:
                      - name: envoy.filters.http.grpc_web
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                      - name: envoy.filters.http.cors
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
        - name: front_end_service
          connect_timeout: 0.25s
          type: LOGICAL_DNS
          # Define the load balancing policy here
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: front_end
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: awi-ui
                      port_value: 5001
        - name: awi_service
          connect_timeout: 0.25s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          load_assignment:
            cluster_name: awi
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: awi-grpc-catalyst-sdwan
                          port_value: 50051
        - name: infra_service
          connect_timeout: 0.25s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          load_assignment:
            cluster_name: infra
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: awi-infra-guard
                          port_value: 50052

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-proxy
  namespace: awi-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-proxy
  template:
    metadata:
      labels:
        app: envoy-proxy
    spec:
      containers:
      - name: envoy-proxy
        image: envoyproxy/envoy:v1.22.0
        volumeMounts:
        - name: config-volume
          mountPath: "/etc/envoy/"
      volumes:
      - name: config-volume
        configMap:
          name: envoy-proxy-config
          items:
          - key: envoy.yaml
            path: envoy.yaml

---

apiVersion: v1
kind: Service
metadata:
  name: envoy-proxy
  namespace: awi-system
spec:
  type: LoadBalancer
  selector:
    app: envoy-proxy
  ports:
    - name: envoy-proxy-front
      protocol: TCP
      port: 80
      targetPort: 80
    - name: envoy-proxy-backend
      protocol: TCP
      port: 8080
      targetPort: 8080
